using Assets.cls;
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18034
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using UnityEngine;


namespace AssemblyCSharp
{
	public class Brick : ISquareDiv
	{
		
		
		
		private Dictionary<int, Sprite> StateList;
		private int State;
		private Sprite _Image;
		public Brick()
		{
			_Image = null;
			LoadMe();
		}
		public Brick(int state)
		{
			Init();
			InitState(state);
		}
		private void Init()
		{
			_Image = null;
			LoadMe();
		}
		public Sprite Base {
			//Возвращает путь для картинки. Потому этот путь через Base передается в канвас квадратика.
			get { return StateList[State]; }
		}
		
		public Sprite Image {
			get { return _Image; }
		}
		private void UpdateImage()
		{
			//_Image.SetValue(Image.SourceProperty, Base)
		}
		public bool IsPassable()
		{
			return false;
		}
		
		public void LoadMe()
		{
			StateList = new Dictionary<int, Sprite>();

            //StateList.Add(0, StaticSpriteCache.sprites[4]);81
            //StateList.Add(1, StaticSpriteCache.sprites[5]);62
            //StateList.Add(2, StaticSpriteCache.sprites[6]);63

                 StateList.Add(0, StaticSpriteCache.sprites[81]);
            StateList.Add(1, StaticSpriteCache.sprites[62]);
            StateList.Add(2, StaticSpriteCache.sprites[63]);

			State = 0;
			UpdateImage();
		}
		public int IncrementDamage { get; set; }
		public bool UpdateBase(int elapsedTime, int Damage)
		{
			IncrementDamage = IncrementDamage + Damage;
			//тут реализовываетс ялогика, разрушения. каждый разрушшаемый блок, разрушается по разному в зависимости от Damage(кирка, взрыв)
			switch (IncrementDamage) {
				//DoDamage сразу меняет картинку квадрата. после скольки то ударов.
			case 9:
			case 10:
			case 11:
			case 12:
			case 13:
			case 14:
			case 15:
			case 16:
			case 17:
				this.State = this.State + 1;
				IncrementDamage = 0;
				return true;
			case 18:
			case 19:
			case 20:
			case 21:
			case 22:
			case 23:
			case 24:
			case 25:
			case 26:
				this.State = this.State + 1;
				IncrementDamage = 0;
				return true;
					default:
				if (IncrementDamage>26)
				{
					this.State = this.State + 1;
					IncrementDamage = 0;
					return true;
				}
				break;
			}
			
			return false;
			//UpdateImage()
		}
		public bool YouMustRemoveMe()
		{
			if (this.State == StateList.Count) {
				return true;
			} else {
				return false;
			}
		}
		public bool YouMustUpdateMe()
		{
			return true;
		}
		public bool CanBeDamaged()
		{
			return true;
		}
		
		public bool CanShowDamage()
		{
			return true;
		}
		
		public void InitState(int state)
		{
			this.State = state;
		}
	}
}

